// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  spaceMember    SpaceMember[]
  Content        Content[]
  CalendarEvents CalendarEvent[]
  UserCalendar   UserCalendar[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Space {
  id             String          @id @default(cuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  spaceMembers   SpaceMember[]
  Content        Content[]
  CalendarEvents CalendarEvent[]
  SpaceFeedItem  SpaceFeedItem[]
}

model SpaceFeedItem {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  space           Space          @relation(fields: [spaceId], references: [id])
  spaceId         String
  content         Content?       @relation(fields: [contentId], references: [id])
  contentId       String?
  calendarEvent   CalendarEvent? @relation(fields: [calendarEventId], references: [id])
  calendarEventId String?
}

model SpaceMember {
  id        String    @id @default(cuid())
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  leftAt    DateTime?
}

model Content {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  title         String
  body          String
  space         Space           @relation(fields: [spaceId], references: [id])
  spaceId       String
  author        User            @relation(fields: [authorId], references: [id])
  authorId      String
  spaceFeedItem SpaceFeedItem[]
  order         Int
}

model ContentHistory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  content   Content  @relation(fields: [contentId], references: [id])
  contentId String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  content   Content  @relation(fields: [contentId], references: [id])
  contentId String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model CalendarEvent {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  title         String
  body          String
  startAt       DateTime
  endAt         DateTime
  space         Space           @relation(fields: [spaceId], references: [id])
  spaceId       String
  author        User            @relation(fields: [authorId], references: [id])
  authorId      String
  spaceFeedItem SpaceFeedItem[]
  userCalendar  UserCalendar[]
  proposals     Proposal[]
}

model CalendarEventAttendee {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  calendarEvent   CalendarEvent @relation(fields: [calendarEventId], references: [id])
  calendarEventId String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  isAttending     Boolean
}

model UserCalendar {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  startAt         DateTime
  endAt           DateTime
  calendarEvent   CalendarEvent @relation(fields: [calendarEventId], references: [id])
  calendarEventId String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
}

model Proposal {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  body      String
  space     Space    @relation(fields: [spaceId], references: [id])
  spaceId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  status    String @default("Created")
  proposalType    String @default("Internal")
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  proposal  Proposal @relation(fields: [proposalId], references: [id])
  proposalId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  yes       Boolean
  myPick    User?     @relation(fields: [myPickId], references: [id])
  myPickId  String
}

model Objection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  proposal  Proposal @relation(fields: [proposalId], references: [id])
  proposalId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  body      String
  resolved  DateTime?
  resolvedBy User?     @relation(fields: [resolvedById], references: [id])
  resolvedById String
}

model FeedbackRound {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creator      User     @relation(fields: [creatorId], references: [id])
  creatorId    String
  title     String
  body      String
  columns  String[]
}

model FeedbackItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  feedbackRound FeedbackRound @relation(fields: [feedbackRoundId], references: [id])
  feedbackRoundId String
  body      String
  creator      User     @relation(fields: [creatorId], references: [id])
  creatorId    String
  column    String @default("Created")
  order     Int
  finished  Boolean @default(false)
  finishedAt DateTime?
  finishedBy User?     @relation(fields: [finishedById], references: [id])
  finishedById String
}

model Selection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  body      String
  status    String @default("Created")
}

model SelectionAlternatives {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  selection Selection @relation(fields: [selectionId], references: [id])
  selectionId String
  creator      User     @relation(fields: [creatorId], references: [id])
  creatorId    String
  title     String
  body      String
  order     Int
}


model SelectionVoteEntry {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  selection Selection @relation(fields: [selectionId], references: [id])
  selectionId String
  value     Int
  alternative SelectionAlternatives @relation(fields: [alternativeId], references: [id])
  alternativeId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
