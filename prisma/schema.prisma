// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String                  @id @default(cuid())
  name                      String?
  email                     String?                 @unique
  emailVerified             DateTime?
  image                     String?
  accounts                  Account[]
  sessions                  Session[]
  spaceMember               SpaceMember[]
  content                   Content[]
  proposalVotes             ProposalVote[]          @relation("ProposalVote")
  proposalPicks             ProposalVote[]          @relation("ProposalPick")
  proposalObjections        Objection[]             @relation("ProposalObjection")
  proposalObjectionResolves Objection[]             @relation("ProposalObjectionResolves")
  feedbackItems             FeedbackItem[]          @relation("FeedbackItem")
  contentVersion            ContentVersion[]
  comment                   Comment[]
  calendarEvent             CalendarEvent[]
  calendarEventAttendee     CalendarEventAttendee[]
  userCalendar              UserCalendar[]
  proposal                  Proposal[]
  feedbackRound             FeedbackRound[]
  selection                 Selection[]
  selectionAlternatives     SelectionAlternative[]
  selectionVoteEntry        SelectionVoteEntry[]
  dataIndex                 DataIndex[]
  contentSignature          ContentSignature[]
  proposalParticipant       ProposalParticipant[]
  selectionParticipant      SelectionParticipant[]
  feedbackNote              FeedbackNote[]
  feedbackMovement          FeedbackMovement[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Space {
  id             String          @id @default(cuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  spaceMembers   SpaceMember[]
  content        Content[]
  calendarEvents CalendarEvent[]
  spaceFeedItem  SpaceFeedItem[]
  proposal       Proposal[]
  dataIndex      DataIndex[]
  selection      Selection[]
  feedbackRound  FeedbackRound[]
}

model SpaceFeedItem {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  feedEventType   String
  space           Space          @relation(fields: [spaceId], references: [id])
  spaceId         String
  content         Content?       @relation(fields: [contentId], references: [id])
  contentId       String?
  calendarEvent   CalendarEvent? @relation(fields: [calendarEventId], references: [id])
  calendarEventId String?
  proposal        Proposal?      @relation(fields: [proposalId], references: [id])
  proposalId      String?
  selection       Selection?     @relation(fields: [selectionId], references: [id])
  selectionId     String?
  feedbackRound   FeedbackRound? @relation(fields: [feedbackRoundId], references: [id])
  feedbackRoundId String?
  dataIndex       DataIndex?     @relation(fields: [dataIndexId], references: [id])
  dataIndexId     String?
}

model SpaceMember {
  id        String    @id @default(cuid())
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  leftAt    DateTime?
}

model Content {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  title          String
  body           String
  space          Space            @relation(fields: [spaceId], references: [id])
  spaceId        String
  author         User             @relation(fields: [authorId], references: [id])
  authorId       String
  spaceFeedItem  SpaceFeedItem[]
  order          Int
  contentVersion ContentVersion[]
  comment        Comment[]
}

model ContentVersion {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  body             String
  content          Content            @relation(fields: [contentId], references: [id])
  contentId        String
  author           User               @relation(fields: [authorId], references: [id])
  authorId         String
  ContentSignature ContentSignature[]
}

model ContentSignature {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  contentVersion   ContentVersion @relation(fields: [contentVersionId], references: [id])
  contentVersionId String
  signatory        User           @relation(fields: [signatoryId], references: [id])
  signatoryId      String
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  content   Content  @relation(fields: [contentId], references: [id])
  contentId String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model CalendarEvent {
  id                    String                  @id @default(cuid())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  title                 String
  body                  String
  startAt               DateTime
  endAt                 DateTime
  space                 Space                   @relation(fields: [spaceId], references: [id])
  spaceId               String
  author                User                    @relation(fields: [authorId], references: [id])
  authorId              String
  spaceFeedItem         SpaceFeedItem[]
  userCalendar          UserCalendar[]
  proposals             Proposal[]
  calendarEventAttendee CalendarEventAttendee[]
  selection             Selection[]
}

model CalendarEventAttendee {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  calendarEvent   CalendarEvent @relation(fields: [calendarEventId], references: [id])
  calendarEventId String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  isAttending     Boolean
}

model UserCalendar {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  startAt         DateTime
  endAt           DateTime
  calendarEvent   CalendarEvent @relation(fields: [calendarEventId], references: [id])
  calendarEventId String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
}

model Proposal {
  id              String                @id @default(cuid())
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  title           String
  body            String
  space           Space                 @relation(fields: [spaceId], references: [id])
  spaceId         String
  author          User                  @relation(fields: [authorId], references: [id])
  authorId        String
  proposalState   String                @default("ProposalCreated")
  proposalType    String                @default("Internal")
  votes           ProposalVote[]
  participants    ProposalParticipant[]
  objections      Objection[]
  calendarEvent   CalendarEvent?        @relation(fields: [calendarEventId], references: [id])
  calendarEventId String?
  spaceFeedItem   SpaceFeedItem[]
}

model ProposalParticipant {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  proposal      Proposal @relation(fields: [proposalId], references: [id])
  proposalId    String
  participant   User     @relation(fields: [participantId], references: [id])
  participantId String
}

model SelectionParticipant {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  selection     Selection @relation(fields: [selectionId], references: [id])
  selectionId   String
  participant   User      @relation(fields: [participantId], references: [id])
  participantId String
}

model ProposalVote {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String
  user       User     @relation(name: "ProposalVote", fields: [userId], references: [id])
  userId     String
  accept     Boolean?
  myPick     User?    @relation(name: "ProposalPick", fields: [myPickId], references: [id])
  myPickId   String?
}

model Objection {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  proposal        Proposal  @relation(fields: [proposalId], references: [id])
  proposalId      String
  author          User      @relation(name: "ProposalObjection", fields: [authorId], references: [id])
  authorId        String
  body            String
  resolvedAt      DateTime?
  resolvedBy      User?     @relation(name: "ProposalObjectionResolves", fields: [resolvedById], references: [id])
  resolvedById    String?
  resolvedComment String?
}

model FeedbackRound {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  creator         User             @relation(fields: [creatorId], references: [id])
  creatorId       String
  title           String
  body            String
  space           Space            @relation(fields: [spaceId], references: [id])
  spaceId         String
  status          String           @default("Created")
  feedbackItem    FeedbackItem[]
  feedbackColumns FeedbackColumn[]
  spaceFeedItem   SpaceFeedItem[]
}

model FeedbackColumn {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  title            String
  wipLimit         Int?
  order            Int
  feedbackRound    FeedbackRound      @relation(fields: [feedbackRoundId], references: [id])
  feedbackRoundId  String
  feedbackItems    FeedbackItem[]
  feedbackMovement FeedbackMovement[]
}

model FeedbackMovement {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  feedbackItem     FeedbackItem   @relation(fields: [feedbackItemId], references: [id])
  feedbackItemId   String
  feedbackColumn   FeedbackColumn @relation(fields: [feedbackColumnId], references: [id])
  feedbackColumnId String
  mover            User           @relation(fields: [moverId], references: [id])
  moverId          String
}

model FeedbackItem {
  id                    String             @id @default(cuid())
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  feedbackRound         FeedbackRound      @relation(fields: [feedbackRoundId], references: [id])
  feedbackRoundId       String
  title                 String
  body                  String
  author                User               @relation(name: "FeedbackItem", fields: [authorId], references: [id])
  authorId              String
  column                FeedbackColumn?    @relation(fields: [columnId], references: [id])
  columnId              String?
  order                 Int
  createdByExternalUser Boolean
  feedbackNotes         FeedbackNote[]
  feedbackMovement      FeedbackMovement[]
}

model FeedbackNote {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  feedbackItem   FeedbackItem @relation(fields: [feedbackItemId], references: [id])
  feedbackItemId String
  author         User         @relation(fields: [authorId], references: [id])
  authorId       String
  body           String
}

model Selection {
  id              String                 @id @default(cuid())
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  space           Space                  @relation(fields: [spaceId], references: [id])
  spaceId         String
  creator         User                   @relation(fields: [creatorId], references: [id])
  creatorId       String
  title           String
  body            String
  status          String                 @default("Created")
  calendarEvent   CalendarEvent?         @relation(fields: [calendarEventId], references: [id])
  calendarEventId String?
  votingCapital   Int?
  spaceFeedItem   SpaceFeedItem[]
  alternatives    SelectionAlternative[]
  votes           SelectionVoteEntry[]
  participants    SelectionParticipant[]
}

model SelectionAlternative {
  id          String               @id @default(cuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  selection   Selection            @relation(fields: [selectionId], references: [id])
  selectionId String
  author      User                 @relation(fields: [authorId], references: [id])
  authorId    String
  title       String
  body        String
  votes       SelectionVoteEntry[]
}

model SelectionVoteEntry {
  id            String               @id @default(cuid())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  selection     Selection            @relation(fields: [selectionId], references: [id])
  selectionId   String
  numberOfVotes Int
  alternative   SelectionAlternative @relation(fields: [alternativeId], references: [id])
  alternativeId String
  user          User                 @relation(fields: [userId], references: [id])
  userId        String
}

model DataIndexType {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String
  description String?
  unitName    String
  dataIndex   DataIndex[]
}

model DataIndex {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  title           String
  description     String
  space           Space            @relation(fields: [spaceId], references: [id])
  spaceId         String
  author          User             @relation(fields: [authorId], references: [id])
  authorId        String
  urlToSource     String?
  nameOfSource    String?
  unitType            DataIndexType    @relation(fields: [unitTypeId], references: [id])
  unitTypeId          String
  dataIndexPoints DataIndexPoint[]
  spaceFeedItem   SpaceFeedItem[]
}

model DataIndexPoint {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  value       Int
  datestamp   DateTime
  dataIndex   DataIndex @relation(fields: [dataIndexId], references: [id])
  dataIndexId String
}
